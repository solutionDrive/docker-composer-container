name: Test and build
on: [push, pull_request]
jobs:
  test-and-build:
    name: '[PHP ${{ matrix.build-jobs.php-version }} / COMPOSER ${{ matrix.build-jobs.composer-version }}] test and build'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build-jobs:
          - php-version: "7.0"
            composer-version: "1.10.22"
            composer2: 0
            latest: 0
            experimental: false
          - php-version: "7.1"
            composer-version: "1.10.22"
            composer2: 0
            latest: 0
            experimental: false
          - php-version: "7.2"
            composer-version: "1.10.22"
            composer2: 0
            latest: 0
            experimental: false
          - php-version: "7.3"
            composer-version: "1.10.22"
            composer2: 0
            latest: 0
            experimental: false
          - php-version: "7.4"
            composer-version: "1.10.22"
            composer2: 0
            latest: 1
            experimental: false
          - php-version: "7.4"
            composer-version: "2.1.3"
            composer2: 1
            latest: 0
            experimental: true
          - php-version: "8.0"
            composer-version: "2.1.3"
            composer2: 1
            latest: 0
            experimental: true
      
    continue-on-error: ${{ matrix.build-jobs.experimental }}

    env:
      LATEST: ${{ matrix.build-jobs.latest }}
      PHP_VERSION: ${{ matrix.build-jobs.php-version }}
      COMPOSER_VERSION: ${{ matrix.build-jobs.composer-version }}
      COMPOSER2: ${{ matrix.build-jobs.composer2 }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build docker image
        run: ./docker-build.sh
        shell: bash

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7 # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      - name: Test docker image
        run: ./docker-test.sh
        shell: bash

      - name: Show build images
        run: docker images
        shell: bash

      - name: Push images
        run: ./docker-push.sh
        shell: bash
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
